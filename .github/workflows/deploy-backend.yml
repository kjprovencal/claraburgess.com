name: Deploy Backend to DigitalOcean

on:
  push:
    branches: [ main ]
    paths: [ 'backend/**' ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./backend
      run: npm ci
      
    - name: Build application
      working-directory: ./backend
      run: npm run build
      
    - name: Create deployment package
      run: |
        # Create a deployment directory
        mkdir -p deployment
        
        # Copy backend files (excluding node_modules, dist, and database)
        rsync -av --exclude='node_modules' \
                  --exclude='dist' \
                  --exclude='database.sqlite' \
                  --exclude='*.log' \
                  --exclude='.env*' \
                  backend/ deployment/
        
        # Copy built files
        cp -r backend/dist deployment/
        
        # Create deployment script
        cat > deployment/deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        # Configuration
        APP_NAME="claraburgess.com"
        APP_DIR="/opt/$APP_NAME"
        USER_NAME="clara-app"
        LOG_DIR="/var/log/$APP_NAME"
        
        echo "üöÄ Starting deployment..."
        
        # Create directories if they don't exist
        sudo mkdir -p "$APP_DIR"
        sudo mkdir -p "$LOG_DIR"
        
        # Backup existing database if it exists
        if [ -f "$APP_DIR/database.sqlite" ]; then
            echo "üì¶ Backing up existing database..."
            sudo cp "$APP_DIR/database.sqlite" "$APP_DIR/database.sqlite.backup.$(date +%Y%m%d_%H%M%S)"
        fi
        
        # Stop the application
        echo "üõë Stopping application..."
        sudo -u "$USER_NAME" pm2 stop "$APP_NAME" 2>/dev/null || true
        
        # Copy new files (excluding database)
        echo "üìÅ Copying application files..."
        sudo rsync -av --exclude='database.sqlite' \
                    --exclude='node_modules' \
                    --exclude='.env*' \
                    . "$APP_DIR/"
        
        # Set ownership
        sudo chown -R "$USER_NAME:$USER_NAME" "$APP_DIR"
        
        # Install production dependencies
        echo "üì¶ Installing production dependencies..."
        cd "$APP_DIR"
        sudo -u "$USER_NAME" npm ci --only=production --no-audit --no-fund
        
        # Start the application
        echo "üöÄ Starting application..."
        sudo -u "$USER_NAME" pm2 start ecosystem.config.js
        sudo -u "$USER_NAME" pm2 save
        
        # Health check
        echo "üîç Performing health check..."
        sleep 10
        if curl -f http://localhost:3001/health > /dev/null 2>&1; then
            echo "‚úÖ Health check passed"
        else
            echo "‚ùå Health check failed"
            sudo -u "$USER_NAME" pm2 logs --lines 20
            exit 1
        fi
        
        echo "üéâ Deployment completed successfully!"
        EOF
        
        chmod +x deployment/deploy.sh
        
        # Create PM2 ecosystem file
        cat > deployment/ecosystem.config.js << 'EOF'
        module.exports = {
          apps: [{
            name: 'claraburgess.com',
            script: 'dist/main.js',
            cwd: '/opt/claraburgess.com',
            exec_mode: 'fork',
            env: {
              NODE_ENV: 'production',
              PORT: 3001
            },
            error_file: '/var/log/claraburgess.com/error.log',
            out_file: '/var/log/claraburgess.com/out.log',
            log_file: '/var/log/claraburgess.com/combined.log',
            time: true,
            max_memory_restart: '1G',
            restart_delay: 4000,
            max_restarts: 10,
            min_uptime: '10s'
          }]
        };
        EOF
        
        # Create package.json for production
        cat > deployment/package.json << 'EOF'
        {
          "name": "claraburgess.com",
          "version": "0.0.1",
          "description": "",
          "author": "",
          "private": true,
          "license": "UNLICENSED",
          "scripts": {
            "start": "node dist/main"
          },
          "dependencies": {
            "@nestjs/axios": "^4.0.1",
            "@nestjs/common": "^11.1.6",
            "@nestjs/config": "^4.0.2",
            "@nestjs/core": "^11.1.6",
            "@nestjs/jwt": "^11.0.0",
            "@nestjs/passport": "^11.0.5",
            "@nestjs/platform-express": "^11.1.6",
            "@nestjs/typeorm": "^11.0.0",
            "@types/cheerio": "^0.22.35",
            "axios": "^1.12.0",
            "bcryptjs": "^3.0.2",
            "cheerio": "^1.1.2",
            "cloudinary": "^2.7.0",
            "dotenv": "^17.2.2",
            "passport-jwt": "^4.0.1"
          }
        }
        EOF
        
        # Create .tar.gz archive
        tar -czf deployment.tar.gz -C deployment .
        
    - name: Upload deployment files
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.DO_HOST }}
        username: ${{ secrets.DO_USER }}
        key: ${{ secrets.DO_SSH_KEY }}
        port: ${{ secrets.DO_PORT || 22 }}
        source: "deployment/*"
        target: "/tmp/deployment"
        strip_components: 1
        
    - name: Deploy to DigitalOcean
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DO_HOST }}
        username: ${{ secrets.DO_USER }}
        key: ${{ secrets.DO_SSH_KEY }}
        port: ${{ secrets.DO_PORT || 22 }}
        script: |
          echo "üöÄ Starting deployment..."
          
          # Configuration
          APP_NAME="claraburgess.com"
          APP_DIR="/opt/$APP_NAME"
          USER_NAME="clara-app"
          LOG_DIR="/var/log/$APP_NAME"
          TEMP_DIR="/tmp/deployment"
          
          # Create directories if they don't exist
          sudo mkdir -p "$APP_DIR"
          sudo mkdir -p "$LOG_DIR"
          
          # Set ownership of directories
          sudo chown -R "$USER_NAME:$USER_NAME" "$APP_DIR"
          sudo chown -R "$USER_NAME:$USER_NAME" "$LOG_DIR"
          
          # Stop any existing PM2 processes
          echo "üõë Stopping existing processes..."
          sudo -u "$USER_NAME" pm2 stop "$APP_NAME" 2>/dev/null || true
          sudo -u "$USER_NAME" pm2 delete "$APP_NAME" 2>/dev/null || true
          
          # Backup existing database if it exists
          if [ -f "$APP_DIR/database.sqlite" ]; then
              echo "üì¶ Backing up existing database..."
              sudo cp "$APP_DIR/database.sqlite" "$APP_DIR/database.sqlite.backup.$(date +%Y%m%d_%H%M%S)"
          fi
          
          # Copy new files (excluding database)
          echo "üìÅ Copying application files..."
          sudo rsync -av --exclude='database.sqlite' \
                      --exclude='node_modules' \
                      --exclude='.env*' \
                      "$TEMP_DIR/" "$APP_DIR/"
          
          # Set ownership
          sudo chown -R "$USER_NAME:$USER_NAME" "$APP_DIR"
          
          # Install production dependencies
          echo "üì¶ Installing production dependencies..."
          cd "$APP_DIR"
          sudo -u "$USER_NAME" npm ci --only=production --no-audit --no-fund
          
          # Verify files are in place
          echo "üîç Verifying deployment files..."
          ls -la "$APP_DIR/"
          echo "Checking if dist/main.js exists:"
          ls -la "$APP_DIR/dist/main.js" || echo "‚ùå dist/main.js not found!"
          echo "Checking ecosystem.config.js:"
          cat "$APP_DIR/ecosystem.config.js"
          
          # Start the application
          echo "üöÄ Starting application..."
          cd "$APP_DIR"
          sudo -u "$USER_NAME" pm2 start ecosystem.config.js
          sudo -u "$USER_NAME" pm2 save
          
          # Wait for application to start
          echo "‚è≥ Waiting for application to start..."
          sleep 15
          
          # Check PM2 status
          echo "üìä PM2 Status:"
          sudo -u "$USER_NAME" pm2 status
          
          # Cleanup temporary files
          rm -rf "$TEMP_DIR"
          
    - name: Verify deployment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DO_HOST }}
        username: ${{ secrets.DO_USER }}
        key: ${{ secrets.DO_SSH_KEY }}
        port: ${{ secrets.DO_PORT || 22 }}
        script: |
          echo "üîç Verifying deployment..."
          
          # Wait a bit more for the application to fully start
          sleep 10
          
          # Check PM2 status first
          echo "üìä PM2 Status:"
          sudo -u clara-app pm2 status
          
          # Check if the process is running
          PM2_STATUS=$(sudo -u clara-app pm2 jlist | jq -r '.[0].pm2_env.status' 2>/dev/null || echo "unknown")
          echo "PM2 Process Status: $PM2_STATUS"
          
          # If PM2 shows stopped, try to restart it
          if [ "$PM2_STATUS" = "stopped" ] || [ "$PM2_STATUS" = "errored" ]; then
            echo "‚ö†Ô∏è  PM2 process is not running, attempting to restart..."
            sudo -u clara-app pm2 restart claraburgess.com || sudo -u clara-app pm2 start ecosystem.config.js
            sleep 10
            sudo -u clara-app pm2 status
          fi
          
          # Check health endpoint with retries
          echo "üîç Checking health endpoint..."
          HEALTH_CHECK_PASSED=false
          for i in {1..5}; do
            echo "Health check attempt $i/5..."
            if curl -f http://localhost:3001/health > /dev/null 2>&1; then
              echo "‚úÖ Backend is healthy and responding"
              HEALTH_CHECK_PASSED=true
              break
            else
              echo "‚è≥ Health check failed, waiting 5 seconds..."
              sleep 5
            fi
          done
          
          if [ "$HEALTH_CHECK_PASSED" = false ]; then
            echo "‚ùå Backend health check failed after 5 attempts"
            echo "üìã PM2 Status:"
            sudo -u clara-app pm2 status
            echo "üìã PM2 Logs:"
            sudo -u clara-app pm2 logs --lines 30
            echo "üìã System Resources:"
            free -h
            df -h
            echo "üìã Process List:"
            ps aux | grep node
            exit 1
          fi
          
          # Show recent logs
          echo "üìã Recent application logs:"
          sudo -u clara-app pm2 logs --lines 10
          
    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "üéâ Deployment completed successfully!"
          echo "Backend is now running on ${{ secrets.DO_HOST }}:3001"
        else
          echo "‚ùå Deployment failed!"
          echo "Check the logs above for details"
        fi
